scilla_version 0

(* me_ex1_oob_loc contract *)
(* Copyright (c) 2019 Well Bred Software Limited *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
import ListUtils


library ME_EX1_OOB_LOC

let nil_msg = Nil {Message}

let one_msg =
  fun (msg : Message) =>
  Cons {Message} msg nil_msg

let not_owner_code = Int32 1
let set_hello_code = Int32 2
let reset_hello_code = Int32 3
let oob_event_code = Int32 4
let get_debug_code = Int32 5

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ME_EX1_OOB_LOC
(
  owner: ByStr20,
  payee: ByStr20,
  penaltyThreshold: Uint32,
  penaltyAmount: Uint128
)

field debug_msg: String = "[debug-init]"
field oob_count: Uint32 = Uint32 0
field oobPenaltyApplied: Bool = False

transition receiveOobEvent(event_type : String, asset_name : String)
  one = Uint32 1;
  old <- oob_count;
  new = builtin add old one;
  oob_count := new;
  log_msg = {
    _tag: "logOobEvent";
    _recipient: _this_address;
    _amount: Uint128 0
  };
  msgs1 = one_msg log_msg;
  (*  [** Add test that sender is on approved list **] *)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    send msgs1
  | True =>
    msg1 = builtin concat event_type asset_name;
    debug_msg := msg1;
    belowThreshold = builtin lt new penaltyThreshold;
    match belowThreshold with
    | True =>
        msg = {
          _tag: "";
          _recipient: owner;
          _amount: Uint128 0
        };
        msgs2 = Cons {Message} msg msgs1;
        send msgs2
    | False =>
        oobPenaltyApplied_l <- oobPenaltyApplied;
        match oobPenaltyApplied_l with
        | True =>
            msg = {
              _tag: "";
              _recipient: _sender;
              _amount: Uint128 0;
              note: "Already fined"
            };
            msgs2 = Cons {Message} msg msgs1;
            send msgs2
        | False =>
            t = True;
            oobPenaltyApplied := t;
            msg = {
              _tag: "";
              _recipient: payee;
              _amount: penaltyAmount;
              note: "OutOfBoundsThreshold Exceeded"
            };
            msgs2 = Cons {Message} msg msgs1;
            send msgs2
        end
    end
  end
end

transition logOobEvent()
  e = {_eventname: "oobEvent"; code: oob_event_code};
  event e
end

transition getDebug()
  r <- debug_msg;
  e = {_eventname: "getDebug()"; msg: r};
  event e
end

transition multipleMsgs()
  msg1 = {_tag : ""; _recipient : _sender; _amount : Uint128 0};
  msg2 = {_tag : ""; _recipient : _sender; _amount : Uint128 0};
  msgs1 = one_msg msg1;
  msgs2 = Cons {Message} msg2 msgs1;
  send msgs2
end

transition contrAddr()
  msg1 = {_eventname : "ContractAddress"; addr : _this_address };
  event msg1
end
